(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{433:function(t,n,s){"use strict";s.r(n);var a=s(42),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"yaml速成个人翻译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yaml速成个人翻译"}},[t._v("#")]),t._v(" YAML速成个人翻译")]),t._v(" "),s("h2",{attrs:{id:"译序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#译序"}},[t._v("#")]),t._v(" 译序")]),t._v(" "),s("p",[t._v("学习circle-ci的用法时，无意中在网上看到了这个教程，拜读"),s("a",{attrs:{href:"https://learnxinyminutes.com/docs/yaml/",target:"_blank",rel:"noopener noreferrer"}},[t._v("英文版"),s("OutboundLink")],1),t._v(" 之后觉得实在不错，就动了翻译的心思。可惜的是，已经有了中文翻译。不过这个翻译让人实在不满意，于是我重新翻译了一遍，希望能像YAML一样，“让人类可写可读”。")]),t._v(" "),s("p",[t._v("2020.07.27")]),t._v(" "),s("p",[t._v("于家中")]),t._v(" "),s("h2",{attrs:{id:"正文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[t._v("#")]),t._v(" 正文")]),t._v(" "),s("p",[t._v("YAML 是一种数据序列化语言，旨在让人类直接可写可读。")]),t._v(" "),s("p",[t._v("它是 JSON 的严格超集，增加了"),s("em",[t._v("在语法上有意义的")]),t._v("（syntactically significant，参见译注1）换行符和缩进，就像Python一样。但和Python的不同之处在于，YAML不允许使用"),s("em",[t._v("文字制表符")]),t._v("（literal tab characters）来表示缩进。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文档开头")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YAML 中的注释看起来像这样。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 标量类型     #")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 我们的根对象 (贯穿整个文档的始终) 是一个映射（map），")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 它等价于其它语言中的一个字典（dictionary），哈希表（hash）或对象（object）。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("another_key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Another value goes here.\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("a_number_value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 数字 1 会被解释为数值，而不是一个布尔值。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果你想要的是一个布尔值，使用 true。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scientific_notation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e+12")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("null_value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token null important"}},[t._v("null")]),t._v("\nkey with spaces"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意，字符串可以不括在引号里。当然，也可以括在引号里。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("however")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A string, enclosed in quotes.'")]),t._v("\n'Keys can be quoted too.'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Useful if you want to put a ':' in your key.\"")]),t._v("\nsingle quotes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 'have ''one'' escape pattern'\ndouble quotes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"have many: \\", \\0, \\t, \\u263A, \\x0d\\x0a == \\r\\n, and more."')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# UTF-8/16/32字符需要指明编码（通过\\u）。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 参见译注2。")]),t._v("\nSuperscript two"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\u00B2\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 多行字符串既可以写成一个'字面量块'(使用 '|')，")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 也可以写成一个'折叠块'(使用 '>')。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 参见译注3。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("literal_block")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n    This entire block of text will be the value of the 'literal_block' key,\n    with line breaks being preserved.")]),t._v("\n\n    The literal continues until de"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dented"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" and the leading indentation is\n    stripped.\n\n        Any lines that are 'more"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("indented' keep the rest of their indentation "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n        these lines will be indented by 4 spaces.\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("folded_style")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n    This entire block of text will be the value of 'folded_style', but this\n    time, all newlines will be replaced with a single space.")]),t._v("\n\n    Blank lines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" like above"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" are converted to a newline character.\n\n        'More"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("indented' lines keep their newlines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" too "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n        this text will appear over two lines.\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("####################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 集合类型         #")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("####################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 嵌套是通过缩进完成的。推荐使用2个空格的缩进（但非必须）。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("a_nested_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("another_key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Another Value\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("another_nested_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hello\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 映射的键不必是字符串。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("0.25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a float key\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 键也可以是复合（complex）的，比如多行对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 我们用'?'后跟一个空格来表示一个复合键的开始。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n  This is a key\n  that has multiple lines\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" and this is its value\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YAML也允许使用复合键语法表示序列间的映射关系。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 但有些解析器可能会不支持。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一个例子：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Manchester United\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Real Madrid\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("2001-01-01")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("2002-02-02")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 序列 (sequences，等价于列表list或数组array) 看起来像这样")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意 '-' 代表缩进：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("a_sequence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Item 1\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Item 2\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 序列可以包含不同类型。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Item 4\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("another_key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" another_value\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" This is a sequence\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" inside another sequence\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Nested sequence indicators\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" can be collapsed\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为YAML是JSON的超集，你也可以写JSON风格的映射和序列：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("json_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v('"key"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("json_seq")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"takeoff"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nand quotes are optional"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" takeoff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#######################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 其余的 YAML 特性    #")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#######################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YAML 还有一个方便的特性叫“锚”（anchors）。你可以使用它在文档中轻松地完成文本复用。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如下两个键会有相同的值：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("anchored_content")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&anchor_name")]),t._v(" This string will appear as the value of two keys.\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("other_anchor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*anchor_name")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 锚也可被用来复制/继承属性")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("base")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&base")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Everyone has same name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# '<<'称为语言无关的合并键类型（Merge Key Language-Independent Type）.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 它表明一个或多个指定映射中的所有键值会插入到当前的映射中。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 参见译注4。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&foo")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*base")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&bar")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*base")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# foo 和 bar 将都含有 name: Everyone has same name")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YAML 还有标签（tags），你可以用它显式地声明类型。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("explicit_string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!!str")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一些解析器实现了特定语言的标签，就像这个针对Python的复数类型的标签。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("python_complex_number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!!python/complex")]),t._v(" 1+2j\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 我们也可以在YAML的复合键中使用特定语言的标签：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!!python/tuple")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Fifty Seven\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将会是Python中的 {(5, 7): 'Fifty Seven'}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("####################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 其余的 YAML 类型 #")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("####################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 除了字符串和数字，YAML还支持其它标量。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ISO格式的日期和时间字面量也可以被解析。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("datetime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("2001-12-15T02:59:43.1Z")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("datetime_with_spaces")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("2001-12-14 21:59:43.10 -5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("2002-12-14")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个 !!binary 标签表明这个字符串实际上")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是一个用base64编码表示的二进制blob。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gif_file")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!!binary")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5\n  OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+\n  +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC\n  AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs=")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# YAML还有一个集合（set）类型，它看起来像这样：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(" item1\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(" item2\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v(" item3\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("or")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("item1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 集合只是值均为null的映射；上面的集合等价于：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("set2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("item1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token null important"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("item2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token null important"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("item3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token null important"}},[t._v("null")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文档结束")]),t._v("\n")])])]),s("h2",{attrs:{id:"更多资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更多资源"}},[t._v("#")]),t._v(" 更多资源")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://yaml.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML official website"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://codebeautify.org/yaml-validator",target:"_blank",rel:"noopener noreferrer"}},[t._v("Online YAML Validator"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"译注"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#译注"}},[t._v("#")]),t._v(" 译注")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("原文为'syntactically significant newlines and indentation'，原译为“语法显著换行符和缩进”。\n个人认为，significant在此处应为“有意义的”，而非“显著的”。联系上下文，此处应指YAML的换行和缩进具有语法含义，而非在语法上显著（虽然确实很醒目）。\n故译为“在语法上有意义的换行符和缩进”。")])]),t._v(" "),s("li",[s("p",[t._v("原文为'UTF-8/16/32 characters need to be encoded'，原译为“UTF-8/16/32 字符需要被转义”。个人认为，“转义”应为escape，并且虽然\\u本身是一个转义字符，但目的是为了表明编码。\n故译为“UTF-8/16/32字符需要指明编码”。")])]),t._v(" "),s("li",[s("p",[t._v("“字面量块”即'literal block'，此处取literal的“字面”之意。\n从下文也可以看到，字面量块会保留原字符串，包括换行等特殊字符；而折叠块会把原字符串的每一行用空格分隔，然后合并到同一行。")])]),t._v(" "),s("li",[s("p",[t._v("原文为'The regexp << is called Merge Key Language-Independent Type.'。若regexp直译为正则表达式，似有不妥，故在尽量保留含义的基础上有所省略。")])])]),t._v(" "),s("comment")],1)}),[],!1,null,null,null);n.default=e.exports}}]);